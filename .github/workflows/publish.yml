name: 'Publish packages'
on:
  release:
    types: [ published ]
    branches: [ master ]
jobs:
  build_pure_wheels:
    name: Build pure wheels
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build package mlrl-testbed
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade setuptools
          python3 -m pip install build
          mkdir wheelhouse
          python3 -m build --wheel python/subprojects/testbed/
          cp python/subprojects/testbed/dist/*.whl wheelhouse/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: './wheelhouse/*.whl'
          if-no-files-found: error
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TWINE_REPOSITORY: ${{ secrets.PYPI_REPOSITORY }}
        run: |
          python3 -m pip install twine
          python3 -m twine upload --non-interactive wheelhouse/*
        continue-on-error: true
  build_platform_wheels:
    name: Build platform wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare MSVC
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Remove conflicting link.exe
        if: matrix.os == 'windows-latest'
        uses: JesseTG/rm@v1.0.2
        with:
          path: C:\Program Files\Git\usr\bin\link.EXE
      - name: Build package mlrl-common
        uses: pypa/cibuildwheel@v2.3.0
        env:
          CIBW_BEFORE_ALL_MACOS: brew install libomp && brew link libomp --force
          CIBW_BEFORE_BUILD: make clean install_cpp install_cython
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS: auto64
          CIBW_SKIP: 'pp* *musllinux*'
        with:
          package-dir: python/subprojects/common
      - name: Build package mlrl-boosting
        uses: pypa/cibuildwheel@v2.3.0
        env:
          CIBW_BEFORE_ALL_MACOS: brew install libomp && brew link libomp --force
          CIBW_BEFORE_BUILD: make clean install_cpp install_cython
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS: auto64
          CIBW_SKIP: 'pp* *musllinux*'
        with:
          package-dir: python/subprojects/boosting
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: './wheelhouse/*.whl'
          if-no-files-found: error
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TWINE_REPOSITORY: ${{ secrets.PYPI_REPOSITORY }}
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install twine
          python3 -m twine upload --non-interactive wheelhouse/*
        continue-on-error: true
  build_non_native_platform_wheels:
    name: Build non-native platform wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Build package mlrl-common
        uses: pypa/cibuildwheel@v2.3.0
        env:
          CIBW_BEFORE_BUILD: make clean install_cpp install_cython
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS_LINUX: aarch64
          CIBW_SKIP: 'pp* *musllinux*'
        with:
          package-dir: python/subprojects/common
      - name: Build package mlrl-boosting
        uses: pypa/cibuildwheel@v2.3.0
        env:
          CIBW_BEFORE_BUILD: make clean install_cpp install_cython
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS_LINUX: aarch64
          CIBW_SKIP: 'pp* *musllinux*'
        with:
          package-dir: python/subprojects/boosting
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          path: './wheelhouse/*.whl'
          if-no-files-found: error
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TWINE_REPOSITORY: ${{ secrets.PYPI_REPOSITORY }}
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install twine
          python3 -m twine upload --non-interactive wheelhouse/*
        continue-on-error: true
