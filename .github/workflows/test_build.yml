---
name: Test build
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-24.04
    outputs:
      linux: ${{ steps.filter.outputs.linux }}
      macos: ${{ steps.filter.outputs.macos }}
      windows: ${{ steps.filter.outputs.windows }}
      cpp_boosting: ${{ steps.filter.outputs.cpp_boosting }}
      cpp_seco: ${{ steps.filter.outputs.cpp_seco }}
      cpp_tests_boosting: ${{ steps.filter.outputs.cpp_tests_boosting }}
      cpp_tests_seco: ${{ steps.filter.outputs.cpp_tests_seco }}
      python_tests_boosting: ${{ steps.filter.outputs.python_tests_boosting }}
      python_tests_seco: ${{ steps.filter.outputs.python_tests_seco }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            build_files: &build_files
              - '.github/workflows/test_build.yml'
              - '.github/workflows/template_build.yml'
              - 'build'
              - 'build.bat'
              - 'build_system/main.py'
              - 'build_system/core/**'
              - 'build_system/util/**'
              - 'build_system/targets/*.py'
              - 'build_system/targets/compilation/*'
              - 'build_system/targets/packaging/*'
              - 'build_system/targets/testing/*'
            cpp_common: &cpp_common
              - *build_files
              - 'build_system/targets/compilation/cpp/*'
              - 'cpp/.version-cpp'
              - 'cpp/meson.*'
              - 'cpp/subprojects/common/meson.*'
              - 'cpp/subprojects/common/include/**'
              - 'cpp/subprojects/common/src/**'
              - 'python/.version-python'
              - 'python/meson.*'
              - 'python/subprojects/common/meson.*'
            cpp_boosting: &cpp_boosting
              - *cpp_common
              - 'cpp/subprojects/boosting/meson.*'
              - 'cpp/subprojects/boosting/include/**'
              - 'cpp/subprojects/boosting/src/**'
              - 'python/subprojects/boosting/meson.*'
            cpp_seco: &cpp_seco
              - *cpp_common
              - 'cpp/subprojects/seco/meson.*'
              - 'cpp/subprojects/seco/include/**'
              - 'cpp/subprojects/seco/src/**'
              - 'python/subprojects/seco/meson.*'
            cpp_tests_common: &cpp_tests_common
              - *cpp_common
              - 'build_system/targets/testing/cpp/*'
              - 'cpp/subprojects/common/test/**'
            cpp_tests_boosting: &cpp_tests_boosting
              - *cpp_tests_common
              - *cpp_boosting
              - 'cpp/subprojects/boosting/test/**'
            cpp_tests_seco: &cpp_tests_seco
              - *cpp_tests_common
              - *cpp_seco
              - 'cpp/subprojects/seco/test/**'
            python_tests_common: &python_tests_common
              - *cpp_tests_common
              - 'build_system/targets/compilation/cython/*'
              - 'build_system/targets/testing/python/*'
              - 'python/subprojects/common/pyproject.template.toml'
              - 'python/subprojects/common/requirements.txt'
              - 'python/subprojects/common/setup.py'
              - 'python/subprojects/common/mlrl/**'
              - 'python/subprojects/testbed/pyproject.template.toml'
              - 'python/subprojects/testbed/requirements.txt'
              - 'python/subprojects/testbed/setup.py'
              - 'python/subprojects/testbed/mlrl/**'
              - 'python/subprojects/testbed-arff/pyproject.template.toml'
              - 'python/subprojects/testbed-arff/requirements.txt'
              - 'python/subprojects/testbed-arff/setup.py'
              - 'python/subprojects/testbed-arff/mlrl/**'
              - 'python/subprojects/testbed-sklearn/pyproject.template.toml'
              - 'python/subprojects/testbed-sklearn/requirements.txt'
              - 'python/subprojects/testbed-sklearn/setup.py'
              - 'python/subprojects/testbed-sklearn/mlrl/**'
              - 'python/subprojects/testbed-slurm/pyproject.template.toml'
              - 'python/subprojects/testbed-slurm/requirements.txt'
              - 'python/subprojects/testbed-slurm/setup.py'
              - 'python/subprojects/testbed-slurm/mlrl/**'
              - 'python/subprojects/util/pyproject.template.toml'
              - 'python/subprojects/util/requirements.txt'
              - 'python/subprojects/util/setup.py'
              - 'python/subprojects/util/mlrl/**'
              - 'python/tests/mlrl_tests/common/**'
              - 'python/tests/res/data/**'
              - 'python/tests/res/in/**'
              - 'python/tests/conftest.py'
            python_tests_boosting: &python_tests_boosting
              - *python_tests_common
              - *cpp_tests_boosting
              - 'python/subprojects/boosting/pyproject.template.toml'
              - 'python/subprojects/boosting/requirements.txt'
              - 'python/subprojects/boosting/setup.py'
              - 'python/subprojects/boosting/mlrl/**'
              - 'python/tests/mlrl_tests/boosting/**'
              - 'python/tests/res/out/boosting/**'
            python_tests_seco: &python_tests_seco
              - *python_tests_common
              - *cpp_tests_seco
              - 'python/subprojects/seco/pyproject.template.toml'
              - 'python/subprojects/seco/requirements.txt'
              - 'python/subprojects/seco/setup.py'
              - 'python/subprojects/seco/mlrl/**'
              - 'python/tests/mlrl_tests/seco/**'
              - 'python/tests/res/out/seco/**'
            python_tests: &python_tests
              - *python_tests_boosting
              - *python_tests_seco
            linux:
              - *cpp_common
              - *cpp_boosting
              - *cpp_seco
              - '.github/workflows/template_build_linux.yml'
              - '.github/workflows/template_test_python.yml'
            macos:
              - *cpp_common
              - *cpp_boosting
              - *cpp_seco
              - '.github/workflows/template_build_macos.yml'
              - 'build_system/targets/dependencies/*'
              - 'build_system/targets/dependencies/macos/*'
            windows:
              - *cpp_common
              - *cpp_boosting
              - *cpp_seco
              - '.github/workflows/template_build_windows.yml'
  python_version:
    name: Determine supported Python versions
    runs-on: ubuntu-24.04
    outputs:
      python_version: ${{ steps.python_version.outputs.python_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Determine supported Python versions
        id: python_version
        run: echo "python_version=$(sed s/,//g python/.version-python)" >> $GITHUB_OUTPUT
  test_build:
    needs:
      - changes
      - python_version
    name: Test build
    strategy:
      fail-fast: false
      matrix:
        subproject:
          - boosting
          - seco
    uses: ./.github/workflows/template_build.yml
    with:
      subproject: ${{ matrix.subproject }}
      linux: ${{ needs.changes.outputs.linux == 'true' }}
      macos: ${{ needs.changes.outputs.macos == 'true' }}
      windows: ${{ needs.changes.outputs.windows == 'true' }}
      compile: ${{ needs.changes.outputs[format('cpp_{0}', matrix.subproject)] == 'true' }}
      run_cpp_tests: ${{ needs.changes.outputs[format('cpp_tests_{0}', matrix.subproject)] == 'true' }}
      run_python_tests: ${{ needs.changes.outputs[format('python_tests_{0}', matrix.subproject)] == 'true' }}
      python_version: ${{ needs.python_version.outputs.python_version }}
    secrets: inherit
  publish_test_results:
    needs: test_build
    if: always()
    name: Publish test results
    runs-on: ubuntu-24.04
    steps:
      - name: Download C++ test results
        uses: actions/download-artifact@v6
        with:
          pattern: cpp-test-results-*
          path: cpp_test_results
      - name: Publish C++ test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: C++ Test Results
          files: cpp_test_results/**/*.xml
      - name: Download Python test results
        uses: actions/download-artifact@v6
        with:
          pattern: python-test-results-*
          path: python_test_results
      - name: Publish Python test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Python Test Results
          files: python_test_results/**/*.xml
  check_success:
    needs: test_build
    if: ${{ always() && !cancelled() }}
    name: Test build succeeded
    runs-on: ubuntu-24.04
    steps:
      - name: Check for success
        run: |-
          if [[ "${{ needs.test_build.result }}" == "failure" ]]; then
            exit 1
          fi
