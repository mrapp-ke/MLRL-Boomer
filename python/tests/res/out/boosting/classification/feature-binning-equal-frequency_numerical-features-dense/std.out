mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --feature-binning equal-frequency --feature-format dense
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         60.46
Example-wise Jaccard (↑)    52.68
Example-wise Precision (↑)  77.72
Example-wise Recall (↑)     60.37
Hamming Accuracy (↑)        80.53
Hamming Loss (↓)            19.47
Macro F1 (↑)                63.23
Macro Jaccard (↑)           47.58
Macro Precision (↑)         73.62
Macro Recall (↑)            57.89
Micro F1 (↑)                66.07
Micro Jaccard (↑)           49.34
Micro Precision (↑)         74.33
Micro Recall (↑)            59.47
Subset 0/1 Loss (↓)         71.43
Subset Accuracy (↑)         28.57

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
