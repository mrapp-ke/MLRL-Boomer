mlrl-testbed mlrl.boosting --log-level debug --data-dir python/tests/res/data --dataset emotions-nominal --base-dir python/tests/res/tmp --result-dir results --save-evaluation true --feature-binning equal-frequency --feature-format dense
Starting experiment using the classification algorithm "BoomerClassifier"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions-nominal.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-nominal.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         59.47
Example-wise Jaccard    52.21
Example-wise Precision  76.87
Example-wise Recall     59.1
Hamming Accuracy        80.44
Hamming Loss            19.56
Macro F1                62.78
Macro Jaccard           47.03
Macro Precision         74.23
Macro Recall            56.08
Micro F1                65.36
Micro Jaccard           48.55
Micro Precision         75.09
Micro Recall            57.87
Subset 0/1 Loss         69.9
Subset Accuracy         30.1

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
