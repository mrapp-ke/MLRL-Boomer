mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --loss squared-error-non-decomposable --statistic-type 32-bit
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         56.21
Example-wise Jaccard (↑)    49.11
Example-wise Precision (↑)  61.82
Example-wise Recall (↑)     56.21
Hamming Accuracy (↑)        77.13
Hamming Loss (↓)            22.87
Macro F1 (↑)                59.84
Macro Jaccard (↑)           43.58
Macro Precision (↑)         65.24
Macro Recall (↑)            55.84
Micro F1 (↑)                61.18
Micro Jaccard (↑)           44.07
Micro Precision (↑)         66.67
Micro Recall (↑)            56.53
Subset 0/1 Loss (↓)         72.45
Subset Accuracy (↑)         27.55

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
