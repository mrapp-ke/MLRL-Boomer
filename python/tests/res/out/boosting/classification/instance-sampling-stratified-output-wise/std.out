mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --instance-sampling stratified-output-wise
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         61.87
Example-wise Jaccard (↑)    53.87
Example-wise Precision (↑)  77.13
Example-wise Recall (↑)     61.82
Hamming Accuracy (↑)        81.21
Hamming Loss (↓)            18.79
Macro F1 (↑)                65.55
Macro Jaccard (↑)           49.82
Macro Precision (↑)         75.1
Macro Recall (↑)            60.21
Micro F1 (↑)                67.55
Micro Jaccard (↑)           51
Micro Precision (↑)         75.16
Micro Recall (↑)            61.33
Subset 0/1 Loss (↓)         71.94
Subset Accuracy (↑)         28.06

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
