mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --feature-binning equal-width --feature-format dense
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         57.77
Example-wise Jaccard (↑)    50.27
Example-wise Precision (↑)  79.25
Example-wise Recall (↑)     57.99
Hamming Accuracy (↑)        80.02
Hamming Loss (↓)            19.98
Macro F1 (↑)                59.32
Macro Jaccard (↑)           45.14
Macro Precision (↑)         71.84
Macro Recall (↑)            55.92
Micro F1 (↑)                64.77
Micro Jaccard (↑)           47.89
Micro Precision (↑)         73.97
Micro Recall (↑)            57.6
Subset 0/1 Loss (↓)         72.45
Subset Accuracy (↑)         27.55

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
