mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions-predefined --result-dir results --save-evaluation true --data-split train-test --print-evaluation true --save-evaluation true
Starting experiment using the classification algorithm "BoomerClassifier"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions-predefined_training.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-predefined.xml"...
Fitting model to 391 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Reading input data from file "python/tests/res/data/emotions-predefined_test.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-predefined.xml"...
Predicting for 202 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         62.24
Example-wise Jaccard    53.96
Example-wise Precision  74.59
Example-wise Recall     63.86
Hamming Accuracy        79.95
Hamming Loss            20.05
Macro F1                66.85
Macro Jaccard           50.79
Macro Precision         72.27
Macro Recall            63.25
Micro F1                67.73
Micro Jaccard           51.2
Micro Precision         72.03
Micro Recall            63.91
Subset 0/1 Loss         72.28
Subset Accuracy         27.72

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
