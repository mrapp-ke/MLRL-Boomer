mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --feature-binning equal-frequency --feature-format sparse
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         61.48
Example-wise Jaccard (↑)    54.38
Example-wise Precision (↑)  77.21
Example-wise Recall (↑)     62.24
Hamming Accuracy (↑)        81.21
Hamming Loss (↓)            18.79
Macro F1 (↑)                65.44
Macro Jaccard (↑)           49.64
Macro Precision (↑)         75.11
Macro Recall (↑)            59.95
Micro F1 (↑)                67.45
Micro Jaccard (↑)           50.89
Micro Precision (↑)         75.33
Micro Recall (↑)            61.07
Subset 0/1 Loss (↓)         68.37
Subset Accuracy (↑)         31.63

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
