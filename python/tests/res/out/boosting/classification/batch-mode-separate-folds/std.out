mlrl-testbed mlrl.boosting --mode batch --log-level debug --base-dir python/tests/res/tmp --config python/tests/res/config/boosting/classification/batch_config.yml --save-evaluation true --save-models true --save-parameters true --save-all true --data-split cross-validation{num_folds=2}
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Running 16 experiments...

Running experiment (1 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset emotions --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_emotions/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_emotions/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/parameters/parameters_fold-1.csv"...
Fitting model to 296 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 297 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         62.08
Example-wise Jaccard    53.68
Example-wise Precision  79.69
Example-wise Recall     61.11
Hamming Accuracy        80.98
Hamming Loss            19.02
Macro F1                64.98
Macro Jaccard           49.49
Macro Precision         74
Macro Recall            59.3
Micro F1                66.8
Micro Jaccard           50.15
Micro Precision         74.95
Micro Recall            60.25
Subset 0/1 Loss         72.73
Subset Accuracy         27.27

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (2 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset emotions --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_emotions/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_emotions/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/parameters/parameters_fold-2.csv"...
Fitting model to 297 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 296 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         62.02
Example-wise Jaccard    54.79
Example-wise Precision  71.96
Example-wise Recall     64.08
Hamming Accuracy        81.19
Hamming Loss            18.81
Macro F1                66.12
Macro Jaccard           50.61
Macro Precision         70.16
Macro Recall            63.63
Micro F1                67.82
Micro Jaccard           51.31
Micro Precision         70.97
Micro Recall            64.94
Subset 0/1 Loss         66.89
Subset Accuracy         33.11

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_emotions/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (3 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset emotions --feature-format sparse --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters/parameters_fold-1.csv"...
Fitting model to 296 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 297 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         62.46
Example-wise Jaccard    54.58
Example-wise Precision  79.35
Example-wise Recall     61.84
Hamming Accuracy        81.31
Hamming Loss            18.69
Macro F1                65.98
Macro Jaccard           50.28
Macro Precision         74.95
Macro Recall            60.2
Micro F1                67.45
Micro Jaccard           50.88
Micro Precision         75.49
Micro Recall            60.95
Subset 0/1 Loss         69.7
Subset Accuracy         30.3

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (4 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset emotions --feature-format sparse --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters/parameters_fold-2.csv"...
Fitting model to 297 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 296 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         62.22
Example-wise Jaccard    54.79
Example-wise Precision  72.24
Example-wise Recall     64.41
Hamming Accuracy        81.08
Hamming Loss            18.92
Macro F1                65.9
Macro Jaccard           50.45
Macro Precision         69.56
Macro Recall            63.97
Micro F1                67.82
Micro Jaccard           51.3
Micro Precision         70.52
Micro Recall            65.31
Subset 0/1 Loss         67.57
Subset Accuracy         32.43

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (5 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset emotions --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/parameters/parameters_fold-1.csv"...
Fitting model to 296 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 297 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         61.68
Example-wise Jaccard    53.55
Example-wise Precision  77.95
Example-wise Recall     60.16
Hamming Accuracy        81.03
Hamming Loss            18.97
Macro F1                64.61
Macro Jaccard           49.09
Macro Precision         74.28
Macro Recall            59.03
Micro F1                66.93
Micro Jaccard           50.29
Micro Precision         75
Micro Recall            60.42
Subset 0/1 Loss         71.38
Subset Accuracy         28.62

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (6 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset emotions --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/parameters/parameters_fold-2.csv"...
Fitting model to 297 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 296 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         61.52
Example-wise Jaccard    53.74
Example-wise Precision  73.09
Example-wise Recall     63.68
Hamming Accuracy        81.08
Hamming Loss            18.92
Macro F1                65.99
Macro Jaccard           50.38
Macro Precision         70.72
Macro Recall            62.77
Micro F1                67.38
Micro Jaccard           50.81
Micro Precision         71.11
Micro Recall            64.02
Subset 0/1 Loss         69.93
Subset Accuracy         30.07

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_emotions/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (7 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset emotions --feature-format sparse --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters/parameters_fold-1.csv"...
Fitting model to 296 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 297 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         61.36
Example-wise Jaccard    53.28
Example-wise Precision  78.62
Example-wise Recall     60.44
Hamming Accuracy        81.09
Hamming Loss            18.91
Macro F1                65.07
Macro Jaccard           49.45
Macro Precision         75.18
Macro Recall            59.17
Micro F1                66.86
Micro Jaccard           50.22
Micro Precision         75.39
Micro Recall            60.07
Subset 0/1 Loss         71.72
Subset Accuracy         28.28

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (8 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset emotions --feature-format sparse --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/parameters/parameters_fold-2.csv"...
Fitting model to 297 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 296 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         60.17
Example-wise Jaccard    52.36
Example-wise Precision  71.4
Example-wise Recall     62.5
Hamming Accuracy        80.46
Hamming Loss            19.54
Macro F1                64.59
Macro Jaccard           48.91
Macro Precision         69.52
Macro Recall            61.56
Micro F1                66.28
Micro Jaccard           49.56
Micro Precision         70.02
Micro Recall            62.92
Subset 0/1 Loss         72.3
Subset Accuracy         27.7

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_emotions/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (9 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset enron --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_enron/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_enron/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/parameters/parameters_fold-1.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         54.09
Example-wise Jaccard    43.64
Example-wise Precision  73.06
Example-wise Recall     50.02
Hamming Accuracy        95.32
Hamming Loss             4.68
Macro F1                19.56
Macro Jaccard           13.98
Macro Precision         56.33
Macro Recall            16.58
Micro F1                56.24
Micro Jaccard           39.12
Micro Precision         69.38
Micro Recall            47.28
Subset 0/1 Loss         86.72
Subset Accuracy         13.28

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (10 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset enron --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_enron/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/dataset_enron/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/parameters/parameters_fold-2.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         54.34
Example-wise Jaccard    43.44
Example-wise Precision  69.6
Example-wise Recall     50.26
Hamming Accuracy        95.17
Hamming Loss             4.83
Macro F1                17.04
Macro Jaccard           11.66
Macro Precision         51.01
Macro Recall            13.99
Micro F1                55.76
Micro Jaccard           38.66
Micro Precision         67.09
Micro Recall            47.71
Subset 0/1 Loss         87.07
Subset Accuracy         12.93

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/dataset_enron/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (11 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset enron --feature-format sparse --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters/parameters_fold-1.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         54.09
Example-wise Jaccard    43.64
Example-wise Precision  73.06
Example-wise Recall     50.02
Hamming Accuracy        95.32
Hamming Loss             4.68
Macro F1                19.56
Macro Jaccard           13.98
Macro Precision         56.33
Macro Recall            16.58
Micro F1                56.24
Micro Jaccard           39.12
Micro Precision         69.38
Micro Recall            47.28
Subset 0/1 Loss         86.72
Subset Accuracy         13.28

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (12 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset enron --feature-format sparse --instance-sampling none --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models --parameter-save-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters --result-dir instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters/parameters_fold-2.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         54.34
Example-wise Jaccard    43.44
Example-wise Precision  69.6
Example-wise Recall     50.26
Hamming Accuracy        95.17
Hamming Loss             4.83
Macro F1                17.04
Macro Jaccard           11.66
Macro Precision         51.01
Macro Recall            13.99
Micro F1                55.76
Micro Jaccard           38.66
Micro Precision         67.09
Micro Recall            47.71
Subset 0/1 Loss         87.07
Subset Accuracy         12.93

Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_none/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (13 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset enron --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/parameters/parameters_fold-1.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         54.09
Example-wise Jaccard    43.53
Example-wise Precision  73.38
Example-wise Recall     49.8
Hamming Accuracy        95.33
Hamming Loss             4.67
Macro F1                18.72
Macro Jaccard           13.4
Macro Precision         58.07
Macro Recall            15.92
Micro F1                56.11
Micro Jaccard           39
Micro Precision         69.76
Micro Recall            46.93
Subset 0/1 Loss         87.19
Subset Accuracy         12.81

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (14 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset enron --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/parameters/parameters_fold-2.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         53.81
Example-wise Jaccard    42.91
Example-wise Precision  73.48
Example-wise Recall     49.19
Hamming Accuracy        95.32
Hamming Loss             4.68
Macro F1                15.88
Macro Jaccard           10.97
Macro Precision         49.86
Macro Recall            13.06
Micro F1                56.27
Micro Jaccard           39.15
Micro Precision         69.69
Micro Recall            47.19
Subset 0/1 Loss         88.37
Subset Accuracy         11.63

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/dataset_enron/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>

Running experiment (15 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=1,last_fold=1,num_folds=2} --dataset enron --feature-format sparse --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 1 of 2-fold cross validation...
Fold 1 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/data_characteristics_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters/parameters_fold-1.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1         54.09
Example-wise Jaccard    43.53
Example-wise Precision  73.38
Example-wise Recall     49.8
Hamming Accuracy        95.33
Hamming Loss             4.67
Macro F1                18.72
Macro Jaccard           13.4
Macro Precision         58.07
Macro Recall            15.92
Micro F1                56.11
Micro Jaccard           39
Micro Precision         69.76
Micro Recall            46.93
Subset 0/1 Loss         87.19
Subset Accuracy         12.81

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/evaluation_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/ground_truth_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/prediction_characteristics_test_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/predictions_test_fold-1.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/joint_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/label_vectors_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/marginal_probability_calibration_model_fold-1.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models/model_fold-1.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/rules_fold-1.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/model_characteristics_fold-1.csv"...
Successfully finished experiment after <duration>

Running experiment (16 / 16): "mlrl-testbed mlrl.boosting --base-dir python/tests/res/tmp --data-dir python/tests/res/data --data-split cross-validation{first_fold=2,last_fold=2,num_folds=2} --dataset enron --feature-format sparse --instance-sampling with-replacement{sample_size=0.5} --log-level debug --loss logistic-decomposable --model-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models --parameter-save-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters --result-dir instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results --save-all true --save-evaluation true --save-meta-data false --save-models true --save-parameters true"
Starting experiment using the classification algorithm "BoomerClassifier"...
Performing fold 2 of 2-fold cross validation...
Fold 2 / 2:
Reading input data from file "python/tests/res/data/enron.arff"...
Parsing meta-data from file "python/tests/res/data/enron.xml"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/data_characteristics_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/parameters/parameters_fold-2.csv"...
Fitting model to 851 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 851 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 2):

Example-wise F1         53.81
Example-wise Jaccard    42.91
Example-wise Precision  73.48
Example-wise Recall     49.19
Hamming Accuracy        95.32
Hamming Loss             4.68
Macro F1                15.88
Macro Jaccard           10.97
Macro Precision         49.86
Macro Recall            13.06
Micro F1                56.27
Micro Jaccard           39.15
Micro Precision         69.69
Micro Recall            47.19
Subset 0/1 Loss         88.37
Subset Accuracy         11.63

Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/evaluation_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/ground_truth_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/prediction_characteristics_test_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/predictions_test_fold-2.arff"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/joint_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/label_vectors_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/marginal_probability_calibration_model_fold-2.csv"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/models/model_fold-2.pickle"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/rules_fold-2.txt"...
Writing output data to file "python/tests/res/tmp/instance-sampling_with-replacement{sample_size=0.5}/loss_logistic-decomposable/feature-format_sparse/dataset_enron/results/model_characteristics_fold-2.csv"...
Successfully finished experiment after <duration>
Successfully finished 16 experiments after <duration>
