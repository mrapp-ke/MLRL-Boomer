mlrl-testbed mlrl.boosting --log-level debug --data-dir python/tests/res/data --dataset emotions-nominal --base-dir python/tests/res/tmp --result-dir results --save-evaluation true --feature-binning equal-frequency --feature-format sparse
Starting experiment using the classification algorithm "BoomerClassifier"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions-nominal.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-nominal.xml"...
Fitting model to 397 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         57.64
Example-wise Jaccard    50.72
Example-wise Precision  78.06
Example-wise Recall     58.08
Hamming Accuracy        80.1
Hamming Loss            19.9
Macro F1                63.08
Macro Jaccard           47.02
Macro Precision         73.59
Macro Recall            56.57
Micro F1                65.07
Micro Jaccard           48.23
Micro Precision         73.9
Micro Recall            58.13
Subset 0/1 Loss         70.92
Subset Accuracy         29.08

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished after <duration>
