mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --data-split none --print-evaluation true --save-evaluation true
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Not using separate training and test sets. The model will be evaluated on the training data...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 593 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 593 training examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for training data:

Example-wise F1 (↑)         100
Example-wise Jaccard (↑)    100
Example-wise Precision (↑)  100
Example-wise Recall (↑)     100
Hamming Accuracy (↑)        100
Hamming Loss (↓)              0
Macro F1 (↑)                100
Macro Jaccard (↑)           100
Macro Precision (↑)         100
Macro Recall (↑)            100
Micro F1 (↑)                100
Micro Jaccard (↑)           100
Micro Precision (↑)         100
Micro Recall (↑)            100
Subset 0/1 Loss (↓)           0
Subset Accuracy (↑)         100

Writing output data to file "python/tests/res/tmp/results/evaluation_training.csv"...
Successfully finished experiment after <duration>
