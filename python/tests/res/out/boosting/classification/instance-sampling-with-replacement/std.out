mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --instance-sampling with-replacement
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         61.16
Example-wise Jaccard (↑)    53.74
Example-wise Precision (↑)  77.64
Example-wise Recall (↑)     61.39
Hamming Accuracy (↑)        80.95
Hamming Loss (↓)            19.05
Macro F1 (↑)                64.73
Macro Jaccard (↑)           49.08
Macro Precision (↑)         73.86
Macro Recall (↑)            58.97
Micro F1 (↑)                66.86
Micro Jaccard (↑)           50.22
Micro Precision (↑)         75.08
Micro Recall (↑)            60.27
Subset 0/1 Loss (↓)         69.9
Subset Accuracy (↑)         30.1

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
