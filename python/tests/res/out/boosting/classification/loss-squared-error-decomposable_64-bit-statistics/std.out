mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --loss squared-error-decomposable --statistic-type 64-bit
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         56.07
Example-wise Jaccard (↑)    47.62
Example-wise Precision (↑)  77.81
Example-wise Recall (↑)     55.53
Hamming Accuracy (↑)        79.42
Hamming Loss (↓)            20.58
Macro F1 (↑)                61.24
Macro Jaccard (↑)           45.14
Macro Precision (↑)         72.88
Macro Recall (↑)            53.81
Micro F1 (↑)                63.11
Micro Jaccard (↑)           46.1
Micro Precision (↑)         73.67
Micro Recall (↑)            55.2
Subset 0/1 Loss (↓)         79.08
Subset Accuracy (↑)         20.92

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
