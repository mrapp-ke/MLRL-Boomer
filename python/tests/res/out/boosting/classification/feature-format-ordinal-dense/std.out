mlrl-testbed mlrl.boosting --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions-ordinal --result-dir results --save-evaluation true --feature-format dense
Starting experiment using the classification algorithm "BoomerClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions-ordinal.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-ordinal.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         63.71
Example-wise Jaccard    55.44
Example-wise Precision  76.62
Example-wise Recall     63.95
Hamming Accuracy        81.38
Hamming Loss            18.62
Macro F1                65.78
Macro Jaccard           50.37
Macro Precision         73.94
Macro Recall            60.98
Micro F1                68.21
Micro Jaccard           51.76
Micro Precision         74.84
Micro Recall            62.67
Subset 0/1 Loss         70.92
Subset Accuracy         29.08

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
