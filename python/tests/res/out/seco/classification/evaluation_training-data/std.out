mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --predict-for-training-data true --print-evaluation true --save-evaluation true
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 397 training examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for training data:

Example-wise F1         65.36
Example-wise Jaccard    56.87
Example-wise Precision  77.02
Example-wise Recall     68.93
Hamming Accuracy        81.95
Hamming Loss            18.05
Macro F1                62.16
Macro Jaccard           50.04
Macro Precision         77.44
Macro Recall            66.99
Micro F1                70.14
Micro Jaccard           54.01
Micro Precision         71.43
Micro Recall            68.89
Subset 0/1 Loss         69.02
Subset Accuracy         30.98

Writing output data to file "python/tests/res/tmp/results/evaluation_training.csv"...
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         53.72
Example-wise Jaccard    44.55
Example-wise Precision  63.06
Example-wise Recall     59.18
Hamming Accuracy        72.96
Hamming Loss            27.04
Macro F1                50.95
Macro Jaccard           36.98
Macro Precision         64.57
Macro Recall            56.59
Micro F1                58.16
Micro Jaccard           41
Micro Precision         57.4
Micro Recall            58.93
Subset 0/1 Loss         81.63
Subset Accuracy         18.37

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
