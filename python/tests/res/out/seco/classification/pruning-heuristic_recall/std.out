mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --rule-pruning irep --pruning-heuristic recall
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         56.29
Example-wise Jaccard    46.89
Example-wise Precision  62.79
Example-wise Recall     63.35
Hamming Accuracy        73.38
Hamming Loss            26.62
Macro F1                52.97
Macro Jaccard           39.06
Macro Precision         64.33
Macro Recall            61.18
Micro F1                60.63
Micro Jaccard           43.5
Micro Precision         57.38
Micro Recall            64.27
Subset 0/1 Loss         79.59
Subset Accuracy         20.41

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
