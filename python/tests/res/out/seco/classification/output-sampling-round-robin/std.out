mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --output-sampling round-robin
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         53.74
Example-wise Jaccard    44.84
Example-wise Precision  66.16
Example-wise Recall     59.1
Hamming Accuracy        74.06
Hamming Loss            25.94
Macro F1                57.09
Macro Jaccard           41.05
Macro Precision         58.34
Macro Recall            56.74
Micro F1                58.84
Micro Jaccard           41.68
Micro Precision         59.56
Micro Recall            58.13
Subset 0/1 Loss         81.12
Subset Accuracy         18.88

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
