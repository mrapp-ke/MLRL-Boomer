mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --heuristic precision
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         52.12
Example-wise Jaccard (↑)    42.64
Example-wise Precision (↑)  62.24
Example-wise Recall (↑)     59.18
Hamming Accuracy (↑)        71.94
Hamming Loss (↓)            28.06
Macro F1 (↑)                53.4
Macro Jaccard (↑)           38.69
Macro Precision (↑)         51.57
Macro Recall (↑)            58.61
Micro F1 (↑)                57.91
Micro Jaccard (↑)           40.75
Micro Precision (↑)         55.5
Micro Recall (↑)            60.53
Subset 0/1 Loss (↓)         85.2
Subset Accuracy (↑)         14.8

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
