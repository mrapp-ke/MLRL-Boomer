mlrl-testbed mlrl.seco --log-level debug --data-dir python/tests/res/data --dataset emotions --base-dir python/tests/res/tmp --result-dir results --save-evaluation true --data-split none --print-evaluation true --save-evaluation true
Starting experiment using the classification algorithm "SeCoClassifier"...
Not using separate training and test sets. The model will be evaluated on the training data...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 593 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 593 training examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for training data:

Example-wise F1         66.41
Example-wise Jaccard    57.36
Example-wise Precision  75.11
Example-wise Recall     69.59
Hamming Accuracy        81.51
Hamming Loss            18.49
Macro F1                61.59
Macro Jaccard           49.23
Macro Precision         78.61
Macro Recall            65.96
Micro F1                69.84
Micro Jaccard           53.66
Micro Precision         70.95
Micro Recall            68.77
Subset 0/1 Loss         70.66
Subset Accuracy         29.34

Writing output data to file "python/tests/res/tmp/results/evaluation_training.csv"...
Successfully finished after <duration>
