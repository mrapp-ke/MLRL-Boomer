mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --data-split cross-validation{first_fold=1,last_fold=1} --print-evaluation true --save-evaluation true
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Performing fold 1 of 10-fold cross validation...
Fold 1 / 10:
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 533 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 60 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data (Fold 1):

Example-wise F1 (↑)         56.63
Example-wise Jaccard (↑)    46.67
Example-wise Precision (↑)  68.33
Example-wise Recall (↑)     60.56
Hamming Accuracy (↑)        74.72
Hamming Loss (↓)            25.28
Macro F1 (↑)                54.04
Macro Jaccard (↑)           40.46
Macro Precision (↑)         74.52
Macro Recall (↑)            57.15
Micro F1 (↑)                60.61
Micro Jaccard (↑)           43.48
Micro Precision (↑)         61.4
Micro Recall (↑)            59.83
Subset 0/1 Loss (↓)         81.67
Subset Accuracy (↑)         18.33

Writing output data to file "python/tests/res/tmp/results/evaluation_test_fold-1.csv"...
Successfully finished experiment after <duration>
