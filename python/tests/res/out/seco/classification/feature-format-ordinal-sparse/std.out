mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions-ordinal --result-dir results --save-evaluation true --feature-format sparse
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions-ordinal.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-ordinal.xml"...
Fitting model to 397 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         55.43
Example-wise Jaccard    46.53
Example-wise Precision  68.7
Example-wise Recall     59.01
Hamming Accuracy        75.51
Hamming Loss            24.49
Macro F1                55.32
Macro Jaccard           40.5
Macro Precision         60.79
Macro Recall            56.16
Micro F1                60.22
Micro Jaccard           43.08
Micro Precision         62.46
Micro Recall            58.13
Subset 0/1 Loss         78.06
Subset Accuracy         21.94

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
