mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset langlog --result-dir results --save-evaluation true --sparse-feature-value 1.0
Starting experiment using the classification algorithm "SeCoClassifier"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/langlog.arff"...
Parsing meta-data from file "python/tests/res/data/langlog.xml"...
Fitting model to 978 training examples...
A sparse matrix with sparse value 1.0 is used to store the feature values of the training examples
A sparse matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 482 test examples...
A sparse matrix with sparse value 1.0 is used to store the feature values of the query examples
A sparse matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1          5.29
Example-wise Jaccard     4.98
Example-wise Precision   6.02
Example-wise Recall     19.5
Hamming Accuracy        97.27
Hamming Loss             2.73
Macro F1                 8.15
Macro Jaccard            8.08
Macro Precision         98.75
Macro Recall             9.33
Micro F1                 5.56
Micro Jaccard            2.86
Micro Precision          6.02
Micro Recall             5.16
Subset 0/1 Loss         95.85
Subset Accuracy          4.15

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
