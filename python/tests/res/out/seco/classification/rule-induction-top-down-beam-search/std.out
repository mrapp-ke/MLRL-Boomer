mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --rule-induction top-down-beam-search
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         51.36
Example-wise Jaccard    42.57
Example-wise Precision  62.53
Example-wise Recall     57.06
Hamming Accuracy        72.53
Hamming Loss            27.47
Macro F1                53.63
Macro Jaccard           38.16
Macro Precision         55.83
Macro Recall            55.44
Micro F1                56.99
Micro Jaccard           39.85
Micro Precision         56.91
Micro Recall            57.07
Subset 0/1 Loss         82.65
Subset Accuracy         17.35

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
