mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --feature-binning equal-frequency --feature-format sparse
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A sparse matrix with sparse value 0.0 is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1         56.56
Example-wise Jaccard    46.98
Example-wise Precision  63.29
Example-wise Recall     61.99
Hamming Accuracy        74.23
Hamming Loss            25.77
Macro F1                52.79
Macro Jaccard           38.87
Macro Precision         52.53
Macro Recall            57.85
Micro F1                59.87
Micro Jaccard           42.72
Micro Precision         59.47
Micro Recall            60.27
Subset 0/1 Loss         80.1
Subset Accuracy         19.9

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
