mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions-predefined --result-dir results --save-evaluation true --data-split train-test --print-evaluation true --save-evaluation true
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions-predefined_training.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-predefined.xml"...
Fitting model to 391 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Reading input data from file "python/tests/res/data/emotions-predefined_test.arff"...
Parsing meta-data from file "python/tests/res/data/emotions-predefined.xml"...
Predicting for 202 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         52.59
Example-wise Jaccard (↑)    43.14
Example-wise Precision (↑)  64.13
Example-wise Recall (↑)     54.29
Hamming Accuracy (↑)        72.28
Hamming Loss (↓)            27.72
Macro F1 (↑)                49
Macro Jaccard (↑)           34.99
Macro Precision (↑)         67.43
Macro Recall (↑)            51.57
Micro F1 (↑)                55.79
Micro Jaccard (↑)           38.69
Micro Precision (↑)         58.73
Micro Recall (↑)            53.13
Subset 0/1 Loss (↓)         83.17
Subset Accuracy (↑)         16.83

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
