mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --instance-sampling without-replacement
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         54.21
Example-wise Jaccard (↑)    45.35
Example-wise Precision (↑)  62.47
Example-wise Recall (↑)     58.84
Hamming Accuracy (↑)        73.81
Hamming Loss (↓)            26.19
Macro F1 (↑)                52.18
Macro Jaccard (↑)           38.1
Macro Precision (↑)         66.87
Macro Recall (↑)            56.51
Micro F1 (↑)                58.6
Micro Jaccard (↑)           41.44
Micro Precision (↑)         59.08
Micro Recall (↑)            58.13
Subset 0/1 Loss (↓)         80.61
Subset Accuracy (↑)         19.39

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
