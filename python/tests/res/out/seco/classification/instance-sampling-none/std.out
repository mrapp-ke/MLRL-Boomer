mlrl-testbed mlrl.seco --log-level debug --base-dir python/tests/res/tmp --data-dir python/tests/res/data --dataset emotions --result-dir results --save-evaluation true --instance-sampling none
Starting experiment using the classification algorithm "SeCoClassifier"...
Writing output data to file "python/tests/res/tmp/metadata.yml"...
Using separate training and test sets...
Reading input data from file "python/tests/res/data/emotions.arff"...
Parsing meta-data from file "python/tests/res/data/emotions.xml"...
Fitting model to 397 training examples...
A dense matrix is used to store the feature values of the training examples
A dense matrix is used to store the labels of the training examples
Successfully fit model in <duration>
Predicting for 196 test examples...
A dense matrix is used to store the feature values of the query examples
A dense matrix is used to store the predicted labels
Successfully predicted in <duration>
Evaluation result for test data:

Example-wise F1 (↑)         50.45
Example-wise Jaccard (↑)    40.83
Example-wise Precision (↑)  61.14
Example-wise Recall (↑)     58.59
Hamming Accuracy (↑)        69.56
Hamming Loss (↓)            30.44
Macro F1 (↑)                54.8
Macro Jaccard (↑)           38.6
Macro Precision (↑)         52.59
Macro Recall (↑)            57.88
Micro F1 (↑)                55.14
Micro Jaccard (↑)           38.06
Micro Precision (↑)         52.01
Micro Recall (↑)            58.67
Subset 0/1 Loss (↓)         86.22
Subset Accuracy (↑)         13.78

Writing output data to file "python/tests/res/tmp/results/evaluation_test.csv"...
Successfully finished experiment after <duration>
